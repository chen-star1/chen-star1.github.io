<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chen-star1.github.io/</id>
    <title>我不是神犇</title>
    <updated>2020-07-04T14:18:51.283Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chen-star1.github.io/"/>
    <link rel="self" href="https://chen-star1.github.io/atom.xml"/>
    <subtitle>多功能博客，待完善
&lt;a href=&quot;https://chen-star1.github.io/&quot;&gt; 博客链接 &lt;/a&gt;</subtitle>
    <logo>https://chen-star1.github.io/images/avatar.png</logo>
    <icon>https://chen-star1.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 我不是神犇</rights>
    <entry>
        <title type="html"><![CDATA[2011提高组T6:观光公交]]></title>
        <id>https://chen-star1.github.io/post/2011-ti-gao-zu-t6guan-guang-gong-jiao/</id>
        <link href="https://chen-star1.github.io/post/2011-ti-gao-zu-t6guan-guang-gong-jiao/">
        </link>
        <updated>2020-07-03T02:36:37.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1315" target=_blank>洛谷传送门</a><br>
<s>为什么我第一眼看过去像个DP</s></p>
<h1 id="基本流程"><strong>基本流程</strong></h1>
<ol>
<li>计算不用加速器的时间ans</li>
<li>使用加速器缩小时间ans</li>
</ol>
<h1 id="不用加速器"><strong>不用加速器</strong></h1>
<p>题面写了<em>公交车每次都必须等待所有景点上车才能前往下一个景点</em><br>
所以想到什么(<s>啥都没想到</s>):计算每一站的到达时间 (a记录乘客的信息)</p>
<pre><code class="language-cpp">for(int i=1;i&lt;=m;i++)  las[a[i].st]=max(las[a[i].st],a[i].t);
</code></pre>
<p>第一站到达时间肯定是<strong>las[i]</strong>:</p>
<pre><code class="language-cpp">arr[1]=las[1]
</code></pre>
<p>随后就是一个动态更新的过程，每一站的到达时间就是前一站的发车时间加这一段路的时间</p>
<pre><code class="language-cpp">for(int i=2;i&lt;=n;i++) arr[i]=max(arr[i-1],las[i-1])+di[i-1];
</code></pre>
<p>最后就是ans了，显然易见，每个乘客的旅游时间=到达时间-出发时间</p>
<pre><code class="language-cpp">for(int i=1;i&lt;=m;i++) ans+=arr[a[i].ed]-a[i].t;
</code></pre>
<p><s>好了,10%的分拿上了</s></p>
<hr>
<h1 id="使用加速器"><strong>使用加速器</strong></h1>
<p>这是就要想使用加速器怎样获得最大收益: <s>废话</s><br>
<s>简单</s>推理一下:</p>
<ul>
<li>肯定收益的人更多使用加速器更值钱</li>
<li>但不一定用在人数最多的点上就是最优</li>
<li>可能加速器能影响许多站点(比如人等车的情况,会缩短等待时间)
<ul>
<li>结论:算出加速器在一个点使用能影响到的最远点，计算两点间的乘客数，比较即可选出最优<br>
<s>所以啰嗦半天就是要使收益人最多</s></li>
</ul>
</li>
</ul>
<p><strong>倒着推方便计算</strong>(<s>好像只能倒着推</s>)</p>
<pre><code class="language-cpp">        lst[n]=lst[n-1]=n;//预处理
        for(int i=n-2;i&gt;=1;i--)
        {
            if(arr[i+1]&lt;=las[i+1]) 
            {
                //如果到达时间小于最后一个人等待时间，那就是人等车，可以延续
                lst[i]=i+1;
            }
            else lst[i]=lst[i+1];//否则车等人，开再多也没用，就停滞了
        }
</code></pre>
<p>题面又说了 <em>每个加速器加速1分钟</em>，所以扫一遍找出缩短时间的最大值</p>
<pre><code class="language-cpp">        for(int i=1;i&lt;n;i++)
        {
            int val=pre[lst[i]]-pre[i];//这里用了前缀和，第i点不受益，不是i-1
            if(val&gt;mx&amp;&amp;di[i]&gt;0) //保证Di&gt;=0,所以减1就是保证Di&gt;0
            {
                tar=i;//tar记录的是对那一条路使用加速器，更新要用
                mx=val;
            }
        }
</code></pre>
<p>好了下面就是更新了，要更新的有</p>
<ol>
<li>答案ans</li>
<li>使用加速器那条路的通过实践</li>
<li>到达时间</li>
</ol>
<pre><code class="language-cpp">        ans-=mx;
        di[tar]-=1;
        for(int i=2;i&lt;=n;i++) arr[i]=max(arr[i-1],las[i-1])+di[i-1];
</code></pre>
<p>最后输出ans，结束</p>
<h1 id="code"><strong>Code</strong></h1>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
const int mxn=1e5+10;
template&lt;class T&gt;void read(T &amp;x);

int n,m,k;
int di[mxn];
struct pass{
    int t,a,b;
}a[mxn];
int las[mxn],arr[mxn];
int pre[mxn];
int ans;
int lst[mxn];

int main()
{
    //freopen(&quot;bus.in&quot;,&quot;r&quot;,stdin);
    //freopen(&quot;bus.out&quot;,&quot;w&quot;,stdout);
    read(n); read(m); read(k);
    for(int i=1;i&lt;n;i++) read(di[i]);
    for(int i=1;i&lt;=m;i++)
    {
        read(a[i].t); read(a[i].a); read(a[i].b);
    }
    for(int i=1;i&lt;=m;i++)
    {
        las[a[i].a]=max(las[a[i].a],a[i].t);
        pre[a[i].b]++;
    }
    arr[1]=las[1];
    for(int i=1;i&lt;=n;i++) pre[i]+=pre[i-1];
    for(int i=2;i&lt;=n;i++)
    {
        arr[i]=max(arr[i-1],las[i-1])+di[i-1];
    }
    for(int i=1;i&lt;=m;i++)
    {
        ans+=arr[a[i].b]-a[i].t;
    }
    while(k--)
    {
        int mx=-1;
        int tar=0;
        lst[n]=lst[n-1]=n;
        for(int i=n-2;i&gt;=1;i--)
        {
            if(arr[i+1]&lt;=las[i+1])
            {
                lst[i]=i+1;
            }
            else lst[i]=lst[i+1];
        }
        for(int i=1;i&lt;n;i++)
        {
            int val=pre[lst[i]]-pre[i];
            if(val&gt;mx&amp;&amp;di[i]&gt;0)
            {
                mx=val;
                tar=i;
            }
        }
        ans-=mx;
        di[tar]-=1;
        for(int i=2;i&lt;=n;i++) arr[i]=max(arr[i-1],las[i-1])+di[i-1];
    }
    printf(&quot;%d\n&quot;,ans);
    //fclose(stdin); fclose(stdout);
    return 0;
}

template&lt;class T&gt;void read(T &amp;x)
{
	x=0;int f=0;char ch=getchar();
	while(ch&lt;'0'||ch&gt;'9') { f|=(ch=='-'); ch=getchar(); }
	while(ch&lt;='9'&amp;&amp;ch&gt;='0') { x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48); ch=getchar(); }
	x = f ? -x : x;
	return ;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[更新日志&问题报告]]></title>
        <id>https://chen-star1.github.io/post/geng-xin-ri-zhi-andwen-ti-bao-gao/</id>
        <link href="https://chen-star1.github.io/post/geng-xin-ri-zhi-andwen-ti-bao-gao/">
        </link>
        <updated>2020-07-02T04:51:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="更新日志"><strong>更新日志</strong></h1>
<ol>
<li>题解:
<ul>
<li>2011提高组 T3(Day1):Mayan游戏---- <a href="https://chen-star1.github.io/post/2011-ti-gao-zu-t3mayan-you-xi/">从该窗口进入</a>----<a href="https://chen-star1.github.io/post/2011-ti-gao-zu-t3mayan-you-xi/" target=_blank> 从新窗口进入 </a></li>
<li>2011提高组 T6(Day2):观光公交--- <a href="https://chen-star1.github.io/post/2011-ti-gao-zu-t6guan-guang-gong-jiao/">从该窗口进入</a>----<a href="https://chen-star1.github.io/post/2011-ti-gao-zu-t6guan-guang-gong-jiao/" target=_blank> 从新窗口进入 </a></li>
</ul>
</li>
</ol>
<h1 id="问题报告"><strong>问题报告</strong></h1>
<ol>
<li>QQ联系方式即将加入(<s>我不会</s>)</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2011提高组 T3:Mayan游戏]]></title>
        <id>https://chen-star1.github.io/post/2011-ti-gao-zu-t3mayan-you-xi/</id>
        <link href="https://chen-star1.github.io/post/2011-ti-gao-zu-t3mayan-you-xi/">
        </link>
        <updated>2020-07-01T12:49:24.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1312" target="_blank"> 洛谷传送门</a></p>
<h3 id="方法dfs剪枝">方法：DFS+剪枝</h3>
<p><s>特别简单，写就是了!</s></p>
<h3 id="定义的变量"><strong>定义的变量</strong></h3>
<pre><code class="language-cpp">const int mxn=10;
int ma[mxn][mxn]; //存储棋盘
int n; //限制步数
int last[mxn][mxn][mxn]; //用于回溯，last[step][i][j]表示第step步时的ma[i][j]
int ans[mxn][mxn]; //答案，包含方块坐标及移动方向
bool de[mxn][mxn]; //临时删除存储，讲删除时会详细讲解
</code></pre>
<h2 id="核心"><strong>核心</strong></h2>
<h3 id="1-check检查是否消除完毕"><em>1. check(检查是否消除完毕):</em></h3>
<p><s>废话，直接全图检查就是了</s><br>
如果全部消除完，那么最后一行肯定都被消除，<strong>只需要枚举最后一行即可</strong></p>
<pre><code class="language-cpp">bool check()
{
    for(int i=1;i&lt;=5;i++)  if(ma[i][1]!=0) return false;
    return true;
}
</code></pre>
<h3 id="2-update进行掉落更新"><em>2. update(进行掉落更新):</em></h3>
<p>定义一个hi为下方空块的数量，模拟即可</p>
<pre><code class="language-cpp">void update()
{
    int hi;
    for(int i=1;i&lt;=5;i++)
    {
        hi=0;
        for(int j=1;j&lt;=7;j++)
        {
            if(ma[i][j]==0) hi++;
            else 
            {
                swap(ma[i][j],ma[i][j-hi]);
            }
        }
    }
}
</code></pre>
<h3 id="3del删除"><em>3.del(删除)</em></h3>
<p>特别注意:<strong>不是见到三个连续的就消除</strong><br>
例如：<br>
<img src="https://chen-star1.github.io//post-images/1593611322947.png" alt="" loading="lazy"><br>
如果直接删除下面三个，就会WA<br>
所以del数组就派上用场了，我们先寻找所有能消除的部分，最后一并删除<br>
上图中，中间点其实被记录了两次(一次横，一次竖)</p>
<pre><code class="language-cpp">bool del()
{
    bool flag=false;
    for(int i=1;i&lt;=5;i++)
    {
        for(int j=1;j&lt;=7;j++)
        {
            if(i&gt;1&amp;&amp;i&lt;=5&amp;&amp;ma[i][j]&amp;&amp;ma[i][j]==ma[i+1][j]&amp;&amp;ma[i][j]==ma[i-1][j])
            {
                de[i][j]=de[i+1][j]=de[i-1][j]=1;
                flag=true;
            }
            if(j&gt;1&amp;&amp;j&lt;7&amp;&amp;ma[i][j]&amp;&amp;ma[i][j]==ma[i][j+1]&amp;&amp;ma[i][j]==ma[i][j-1])
            {
                de[i][j]=de[i][j+1]=de[i][j-1]=1;
                flag=true;
            }
        }
    }
    if(!flag) return false;
    for(int i=1;i&lt;=5;i++)
    {
        for(int j=1;j&lt;=7;j++)
        {
            if(de[i][j])
            {
                de[i][j]=0;
                ma[i][j]=0;
            }
        }
    }
    return true;
}
</code></pre>
<p>定义成bool类型，是因为消除之后可能会再次有方块掉落，掉落后又会产生新的能消除的方块<br>
所以在每次update更新后都要检查能否继续消除</p>
<hr>
<h2 id="剪枝技巧"><strong>剪枝技巧</strong></h2>
<p>1.相同颜色交换可以跳过(必须的)<br>
<strong>2.如果向左边移动，那么被交换的位置一定是空块</strong><br>
Why? <s>显而易见</s><br>
想一想，如果左边不是空块，那么该步骤就可以<strong>变成一个点向右移</strong><br>
而答案要求字典序输出，1优先于-1</p>
<hr>
<h2 id="注意事项"><strong>注意事项</strong></h2>
<p>1.剪枝(上面有了)<br>
2.记得回溯，用last数组调回map(因为有多组解，要寻找最优解更新)<br>
3.答案输出:以(0,0)为起始点，如果以(1,1)为起始点要减一</p>
<hr>
<h3 id="code">Code:</h3>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
template&lt;class T&gt;void read(T &amp;x);
const int mxn=10;
int ma[mxn][mxn];
int n;
int last[mxn][mxn][mxn];
int ans[mxn][mxn];
bool de[mxn][mxn];

bool check()
{
    for(int i=1;i&lt;=5;i++)
    {
        if(ma[i][1]!=0) return false;
    }
    return true;
}

void update()
{
    int hi;
    for(int i=1;i&lt;=5;i++)
    {
        hi=0;
        for(int j=1;j&lt;=7;j++)
        {
            if(ma[i][j]==0) hi++;
            else 
            {
                swap(ma[i][j],ma[i][j-hi]);
            }
        }
    }
}

bool del()
{
    bool flag=false;
    for(int i=1;i&lt;=5;i++)
    {
        for(int j=1;j&lt;=7;j++)
        {
            if(i&gt;1&amp;&amp;i&lt;=5&amp;&amp;ma[i][j]&amp;&amp;ma[i][j]==ma[i+1][j]&amp;&amp;ma[i][j]==ma[i-1][j])
            {
                de[i][j]=de[i+1][j]=de[i-1][j]=1;
                flag=true;
            }
            if(j&gt;1&amp;&amp;j&lt;7&amp;&amp;ma[i][j]&amp;&amp;ma[i][j]==ma[i][j+1]&amp;&amp;ma[i][j]==ma[i][j-1])
            {
                de[i][j]=de[i][j+1]=de[i][j-1]=1;
                flag=true;
            }
        }
    }
    if(!flag) return false;
    for(int i=1;i&lt;=5;i++)
    {
        for(int j=1;j&lt;=7;j++)
        {
            if(de[i][j])
            {
                de[i][j]=0;
                ma[i][j]=0;
            }
        }
    }
    return true;
}

void copy(int step)
{
    for(int i=1;i&lt;=5;i++)
    {
        for(int j=1;j&lt;=7;j++)
        {
            ma[i][j]=last[step][i][j];
        }
    }
}

void dfs(int step)
{
    if(check())
    {
        for(int i=1;i&lt;=n;i++)
        {
            printf(&quot;%d %d %d\n&quot;,ans[i][1],ans[i][2],ans[i][3]);
        }
        exit(0);
    }
    if(step&gt;n) return;

    for(int i=1;i&lt;=5;i++)
    {
        for(int j=1;j&lt;=7;j++) last[step][i][j]=ma[i][j];
    }

    for(int i=1;i&lt;=5;i++)
    {
        for(int j=1;j&lt;=7;j++)
        {
            if(ma[i][j])
            {
                if(i&lt;5&amp;&amp;ma[i][j]!=ma[i+1][j])
                {
                    swap(ma[i][j],ma[i+1][j]);
                    ans[step][1]=i-1; ans[step][2]=j-1; ans[step][3]=1;
                    //do while实现更新并删除
                    do{
                        update();
                    }while(del());
                    dfs(step+1);
                    copy(step);
                }
                if(i&gt;1&amp;&amp;ma[i-1][j]==0)
                {
                    swap(ma[i][j],ma[i-1][j]);
                    ans[step][1]=i-1; ans[step][2]=j-1; ans[step][3]=-1;
                    //do while实现更新并删除
                    do{
                        update();
                    }while(del());
                    dfs(step+1);
                    copy(step);
                }
            }
        }
    }
}

int main()
{
    read(n);
    int in;
    for(int i=1;i&lt;=5;i++)
    {
        for(int j=1;j&lt;=8;j++)
        {
            read(in);
            if(in==0) break;
            ma[i][j]=in;
        }
    }
    dfs(1);
    //如果有解在dfs中直接exit(0),也可以根据ans判断是否有解
    puts(&quot;-1&quot;);
    return 0;
}

template&lt;class T&gt;void read(T &amp;x)
{
	x=0;int f=0;char ch=getchar();
	while(ch&lt;'0'||ch&gt;'9') { f|=(ch=='-'); ch=getchar(); }
	while(ch&lt;='9'&amp;&amp;ch&gt;='0') { x=(x&lt;&lt;1)+(x&lt;&lt;3)+(ch^48); ch=getchar(); }
	x = f ? -x : x;
	return ;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://chen-star1.github.io/post/hello-gridea/</id>
        <link href="https://chen-star1.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>